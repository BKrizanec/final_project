// <auto-generated />
using System;
using FinalProject.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FinalProject.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e14c9f14-4e73-4703-80a8-c9d1c131a2d5",
                            AccessFailedCount = 0,
                            Address = "Nigdjezemska 39",
                            ConcurrencyStamp = "56142d66-5b2a-462b-9638-44122694b16c",
                            Email = "siguran@mailfirme.com",
                            EmailConfirmed = false,
                            FirstName = "Siniša",
                            LastName = "Administratovski",
                            LockoutEnabled = false,
                            NormalizedEmail = "SIGURAN@MAILFIRME.COM",
                            NormalizedUserName = "SIGURAN@MAILFIRME.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB1vdIjhyTZs2flTLtGeJd/xmKhmah4PkVMg3zUxV5frmgeBtd3W4NaLHS8WGTU4Pg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f59a19e4-8e22-4c66-96cf-8481cb515e07",
                            TwoFactorEnabled = false,
                            UserName = "siguran@mailfirme.com"
                        });
                });

            modelBuilder.Entity("FinalProject.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Instrukcije iz predmeta za osnovnu školu.",
                            Image = "",
                            Title = "Osnovna škola"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Instrukcije iz predmeta za srednju školu",
                            Image = "",
                            Title = "Srednja škola"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Instrukcije iz predmeta državne mature.",
                            Image = "",
                            Title = "Državna matura"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Glazba, programiranje, hobiji...",
                            Image = "",
                            Title = "Ostalo"
                        });
                });

            modelBuilder.Entity("FinalProject.Models.Lecturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bio")
                        .HasColumnType("ntext");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .HasColumnType("ntext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Lecturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Mato je ovdje kako bi Vam pomogao naučiti matematiku! Ima 35 godina i u slobodno vrijeme programira i svira gitaru.",
                            ContactEmail = "matomatematicar@gmail.com",
                            Image = "",
                            Title = "Mato Matematičar"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Hrvoje je apsolvent jednopredmetnog studija Hrvatskog jezika i književnosti na Filozofskom fakultetu u Zagrebu. Slobodno ga kontaktirajte sa bilo kakvim pitanjem o hrvatskom jeziku!",
                            ContactEmail = "hrvojehrvat@gmail.com",
                            Image = "",
                            Title = "Hrvoje Hrvat"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Pero je nastavnik na privatnom učilištu Privatus Maximus u Zagrebu, a u slobodno vrijeme drži instrukcije iz programskih jezika C++, C# i JavaScript.",
                            ContactEmail = "pero1337@gmail.com",
                            Image = "",
                            Title = "Pero Programer"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Siniša je oduvijek gajio interes prema tehničkim predmetima, te je voljan svoje znanje podijeliti sa drugima.",
                            ContactEmail = "siniša@gmail.com",
                            Image = "",
                            Title = "Siniša Sistemac"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "Dino je oduvijek volio dizajn, te je svoj hobi odlučio pretvoriti u posao. U slobodno vrijeme poučava sve od modeliranja do dizajna korisničkih sučelja.",
                            ContactEmail = "dino23@gmail.com",
                            Image = "",
                            Title = "Dino Dizajnerić"
                        },
                        new
                        {
                            Id = 6,
                            Bio = "Hinko je završio Filozofski fakultet  i spreman je pomoći svima koji trebaju pomoć sa humanističkim znanostima! Doktorand moderne povijesti.",
                            ContactEmail = "hinkovski@gmail.com",
                            Image = "",
                            Title = "Hinko Humanist"
                        },
                        new
                        {
                            Id = 7,
                            Bio = "Dražen je asistent na Pravnom fakultetu, a u slobodno vrijeme se bavi sa instrukcijama.",
                            ContactEmail = "draz3993@gmail.com",
                            Image = "",
                            Title = "Dražen Društvenjak"
                        },
                        new
                        {
                            Id = 8,
                            Bio = "Jelena je pravi poliglot, te je sa svojih 25 godina naučila 5 jezika.",
                            ContactEmail = "jeja111@gmail.com",
                            Image = "",
                            Title = "Jelena Jezičarka"
                        },
                        new
                        {
                            Id = 9,
                            Bio = "Timotej je oduvijek bio zainteresiran za robotiku, a sada paralelno sa poslom drži instrukcije na ovoj maloj stranici.",
                            ContactEmail = "timon@gmail.com",
                            Image = "",
                            Title = "Timotej Tehničarovski"
                        });
                });

            modelBuilder.Entity("FinalProject.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FinalProject.Models.OrderServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderServices");
                });

            modelBuilder.Entity("FinalProject.Models.ServiceCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            ServiceId = 6
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            ServiceId = 8
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            ServiceId = 9
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            ServiceId = 10
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 4,
                            ServiceId = 11
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            ServiceId = 12
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            ServiceId = 13
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            ServiceId = 14
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            ServiceId = 15
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 2,
                            ServiceId = 16
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            ServiceId = 17
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 1,
                            ServiceId = 18
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 1,
                            ServiceId = 19
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 2,
                            ServiceId = 20
                        });
                });

            modelBuilder.Entity("FinalProject.Models.Services", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Instrukcije iz hrvatskog jezika za osnovnu školu.",
                            LecturerId = 2,
                            Price = 10m,
                            Title = "Hrvatski jezik"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Instrukcije iz engleskog jezika za srednju školu.",
                            LecturerId = 8,
                            Price = 13m,
                            Title = "Engleski jezik"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Instrukcije iz povijesti za osnovnu školu.",
                            LecturerId = 6,
                            Price = 10m,
                            Title = "Povijest"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Instrukcije iz matematike za osnovnu školu.",
                            LecturerId = 1,
                            Price = 17m,
                            Title = "Matematika"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Instrukcije iz njemačkog jezika za srednju školu.",
                            LecturerId = 8,
                            Price = 13m,
                            Title = "Njemački jezik"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Instrukcije iz talijanskog jezika za srednju školu.",
                            LecturerId = 8,
                            Price = 10m,
                            Title = "Talijanski jezik"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Instrukcije iz biologije za državnu maturu.",
                            LecturerId = 7,
                            Price = 9m,
                            Title = "Biologija"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Instrukcije iz fizike za državnu maturu.",
                            LecturerId = 9,
                            Price = 16m,
                            Title = "Fizika"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Instrukcije iz kemije za državnu maturu.",
                            LecturerId = 7,
                            Price = 20m,
                            Title = "Kemija"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Instrukcije iz sviranja gitare za početnike.",
                            LecturerId = 1,
                            Price = 11m,
                            Title = "Gitara"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Instrukcije iz sviranja bubnjeva za početnike.",
                            LecturerId = 1,
                            Price = 13.55m,
                            Title = "Bubnjevi"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Instrukcije iz C# i Jave za početnike.",
                            LecturerId = 3,
                            Price = 12.33m,
                            Title = "Back-end development"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Instrukcije iz Figme i principa etičkog dizajna.",
                            LecturerId = 5,
                            Price = 20m,
                            Title = "UX/UI dizajn"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Instrukcije iz dizajna video-igara i teorijska podloga.",
                            LecturerId = 5,
                            Price = 40m,
                            Title = "Dizajn video-igara"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Instrukcije iz elektrotehnike za srednju tehničku školu.",
                            LecturerId = 1,
                            Price = 20m,
                            Title = "Elektrotehnika"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Instrukcije iz latinskog jezika za srednju školu.",
                            LecturerId = 1,
                            Price = 13m,
                            Title = "Latinski jezik"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Instrukcije iz 3D dizajna u Blenderu",
                            LecturerId = 5,
                            Price = 40m,
                            Title = "3D dizajn"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Instrukcije iz informatike za osnovnu školu.",
                            LecturerId = 4,
                            Price = 18.32m,
                            Title = "Informatika"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Instrukcije iz tehničke kulture za osnovnu školu.",
                            LecturerId = 9,
                            Price = 9m,
                            Title = "Tehnička kultura"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Instrukcije iz sistemske podrške za srednju strukovnu školu.",
                            LecturerId = 4,
                            Price = 30m,
                            Title = "Sistemska podrška"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8a446ec2-7be7-46fc-9294-21b9355631cf",
                            ConcurrencyStamp = "d9fd7dee-c91a-4640-85e8-6b85223696ac",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4a2894e4-5dae-4590-b8e7-6b6c87237a97",
                            ConcurrencyStamp = "b969cdbf-a483-4748-b3a9-45a2cb7131de",
                            Name = "Lecturer",
                            NormalizedName = "LECTURER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e14c9f14-4e73-4703-80a8-c9d1c131a2d5",
                            RoleId = "8a446ec2-7be7-46fc-9294-21b9355631cf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FinalProject.Models.Order", b =>
                {
                    b.HasOne("FinalProject.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinalProject.Models.OrderServices", b =>
                {
                    b.HasOne("FinalProject.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Models.Services", "Services")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("FinalProject.Models.ServiceCategories", b =>
                {
                    b.HasOne("FinalProject.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Models.Services", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FinalProject.Models.Services", b =>
                {
                    b.HasOne("FinalProject.Models.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FinalProject.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FinalProject.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FinalProject.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
